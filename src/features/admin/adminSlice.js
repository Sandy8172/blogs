import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchList,
  deleteBlog,
  fetchBlogByID,
  getBlogsCount,
  updateBlog,
} from "./adminAPI";

const initialState = {
  blogList: [],
  bolgById: {},
  value: 0,
  status: "idle",
  deletedBlog: {},
  blogsCount: {},
  updatedBlog:{}
};

export const blogListAsync = createAsyncThunk(
  "admin/blogList",
  async (type) => {
    const response = await fetchList(type);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const blogByIdAsync = createAsyncThunk(
  "admin/blogById",
  async (blogId) => {
    const response = await fetchBlogByID(blogId);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const deleteBlogAsync = createAsyncThunk(
  "admin/deleteBlog",
  async (id) => {
    const response = await deleteBlog(id);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const blogsCountAsync = createAsyncThunk(
  "admin/blogsCount",
  async () => {
    const response = await getBlogsCount();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const updateBlogAsync = createAsyncThunk(
  "admin/blogsUpdate",
  async (payload) => {
    const response = await updateBlog(payload);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const adminSlice = createSlice({
  name: "admin",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(blogListAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(blogListAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.blogList = action.payload;
      })
      .addCase(blogByIdAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(blogByIdAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.bolgById = action.payload;
      })
      .addCase(deleteBlogAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deleteBlogAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.deletedBlog = action.payload;
      })
      .addCase(blogsCountAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(blogsCountAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.blogsCount = action.payload;
      })
      .addCase(updateBlogAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateBlogAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.updatedBlog = action.payload;
      })
  },
});

export const { increment, decrement, incrementByAmount } = adminSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const blogList = (state) => state.admin.blogList;
export const bolgById = (state) => state.admin.bolgById;
export const deletedBlog = (state) => state.admin.deletedBlog;
export const blogsCount = (state) => state.admin.blogsCount;
export const updatedBlog = (state) => state.admin.updatedBlog;

export default adminSlice.reducer;
